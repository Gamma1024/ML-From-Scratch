---
title: "Simulated Annealing for the Travelling Salesman Problem in Julia"
author: "Jan Schlegel"
date: "2024-29-05"
format:
    html:
        toc: true
        toc-expand: 2
        toc-title: "Table of Contents"
        number-sections: true
        code-fold: true
        code-tools:
            source: true
            toggle: true
        caption: "Code Options"
        code-block-bg: true
        code-block-border-left: "#191970"
        highlight-style: monochrome
        echo: true
        warning: false
        embed-resources: true
jupyter: 
    julia-1.10
---
# Packages and Presets
```{julia}
using CSV
using DataFrames
using Plots
using Random
using StatsBase
using LinearAlgebra
using ProgressBars
```

# Introduction

In this notebook, we will implement a simple simulated annealing (SA) algorithm to solve the travelling salesman problem for 532 cities in the United States. The goal is to find the shortest path that visits each city exactly once and returns to the starting city in the shortest distance possible. The `att532` data set contains the latitude and longitude of each city and can be found [here](https://github.com/mastqe/tsplib). The SA algorithm will be implemented in Julia.

# Data Loading
Loading the data:
```{julia}
# Read the CSV file
coordinates_df = CSV.read("cities.csv", DataFrame; header=false, delim=';')
rename!(coordinates_df, [:x, :y])  

# Convert DataFrame to a Float64 matrix 
CITIES = convert(Matrix{Float64}, Matrix(coordinates_df))
```

Visualizing the 532 American cities:
```{julia}
#| label: Travelling Salesman Problem
#| fig-cap: "Scatter plot of the US cities under consideration"
# Scatter plot
scatter(CITIES[:, 1], CITIES[:, 2], markersize=3, color=:red, alpha=0.75)
display(current())
```

# Cost Function

To perform simulated annealing, we require a cost function that enables us to partially order the quality of different routes. For the traveling salesman problem, a natural choice is the total distance of the route. The following helper function calculates the total $\ell_2$-distance of a given route through the coordinates:

```{julia}
"""
    distance(coordinates::Matrix{Float64}, route::Vector{Int}) -> Float64

Calculates the total distance of the given route through the coordinates.

# Arguments
- `coordinates::Matrix{Float64}`: An Nx2 matrix where N is the number of points 
- `route::Vector{Int}`: The route represented as a permutation of indices.

# Returns
- `Float64`: The total distance of the route.
"""
function distance(coordinates::Matrix{Float64}, route::Vector{Int})
    d = 0.0
    for i in 1:(length(route) - 1)
        d += norm(coordinates[route[i], :] - coordinates[route[i+1], :])
    end
    d += norm(coordinates[route[end], :] - coordinates[route[1], :])
    return d
end
```


# Simulated Annealing
```{julia}

"""
    simulated_annealing(coordinates::Matrix{Float64}, route::Union{Nothing, Vector{Int}}=nothing, epochs::Int=1) -> (Vector{Int}, Vector{Float64})

Performs an optimization algorithm on a set of coordinates to find an optimized route.

# Arguments
- `coordinates::Matrix{Float64}`: An Nx2 matrix where N is the number of points
- `route::Union{Nothing, Vector{Int}}`: An optional initial route. If not provided, a random permutation is used.
- `epochs::Int`: The number of iterations for the algorithm.

# Returns
- `route::Vector{Int}`: The optimized route.
- `distances::Vector{Float64}`: The distance at each epoch.
"""
function simulated_annealing(coordinates::Array{Float64, 2}, route::Union{Nothing, Vector{Int}}=nothing, epochs::Int=1)
    
    Random.seed!(7)

    N = size(coordinates, 1)

    if route === nothing
        route = Random.shuffle(1:N)
    end

    distances = Float64[]
    push!(distances, distance(coordinates, route))
    
    # temperature and temperature reduction factor (found by trial and error)
    T = 20.0
    eta = 0.95

    for e in ProgressBar(1:epochs)
        for idx in shuffle(1:N)
            
            # calculate distance before transposition:
            dist = distance(coordinates, route)
            
            prop_route = copy(route)
            
            ##Propose new route:
            # 2-opt move as in the pseudocode of Algorithm 7 in
            # https://diposit.ub.edu/dspace/bitstream/2445/186678/3/tfg_nogales_gine_roger.pdf 
            i, j = sort(sample(1:N, 2, replace=false))
            # reverse route segment to try to "untangle" the route
            prop_route[i:j] .= reverse(prop_route[i:j])
            
            # calculate distance of proposed route
            dist_new = distance(coordinates, prop_route)
            
            # if distance decreases: keep proposed route
            if dist_new <= dist
                route = prop_route
            else
                ## calculate acceptance probability alpha:
                # note that since p(y→x)=p(x→y) (since for every distinct pair 
                # (i,j) is chosen with probability 1/ (N choose 2)) 
                # the acceptance probability can be rewritten as:
                alpha = min(1, exp((dist - dist_new) / T))
                
                # accept move with acceptance probability alpha
                if rand() <= alpha
                    route = prop_route
                end
            end
        end

        # Reduce temperature
        T *= eta 

        push!(distances, distance(coordinates, route))
    end
    
    return route, distances
end
```

# Travelling Salesman Problem Application
Finally, we can evaluta the simulated annealing algorithm on the 532 cities in the United States. The algorithm will be run for 1000 epochs:
```{julia}
function evaluate_tsp(method::Function, coordinates::Matrix{Float64}, epochs::Int=1)
    """
    
    Evaluate sampling method on coordinates
    
    Args:
        method (Function): sampling method
        coordinates (Matrix{Float64}): city coordinates, shape Nx2
        epochs (Int): number of epochs to run the sampling
    """
    Random.seed!(7)
    N = size(coordinates, 1)
    route = randperm(N)
 
    start_time = time()
    route, distances = method(coordinates, route, epochs)
    execution_time = time() - start_time

    if !all(sort(route) .== 1:N)
        throw(ArgumentError("Returned route is not valid!"))
    end

    x, y = coordinates[route, 1], coordinates[route, 2]
    
    # Plotting
    p1 = plot(1:length(distances), distances, marker=:circle, markersize=3, label="Distance")
    plot!(p1, [0, length(distances)], [27686/1000, 27686/1000], color="green", label="Best known solution")
    xlabel!("Epochs")
    ylabel!("Distance")
    
    p2 =scatter(x, y, markersize=2, color=:red, alpha=0.75, label="Cities")
    # Add lines connecting the cities to show the route
    plot!(p2, x, y, line=:solid, color=:blue, linewidth=2, label="Route", alpha=0.2)
    plot!(p2, [x[end], x[1]], [y[end], y[1]], line=:solid, color=:blue, linewidth=2, alpha=0.2, label="")
    
    plot(p1, p2, layout=(1, 2), size = (600, 200))

    display(current())
end
```

```{julia}
evaluate_tsp(simulated_annealing, CITIES, 1000)
```